{"version":3,"sources":["Components/card.component/card.component.jsx","Components/Cardlist.component/cardlist.component.jsx","Components/searchbox.component/searchbox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monsters","id","name","email","Cardlist","map","monster","key","SearchBox","handleChange","placeholder","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredList","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6TAeeA,G,kBAXF,SAACC,GACV,OACA,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,SAASC,GAAzC,4BACpB,4BAAKL,EAAMI,SAASE,MACpB,2BAAIN,EAAMI,SAASG,UCIZC,EATE,SAACR,GACd,OACI,yBAAKC,UAAU,YACVD,EAAMI,SAASK,KAAI,SAAAC,GAAO,OACtB,kBAAC,EAAD,CAAMC,IAAKD,EAAQL,GAAID,SAAUM,SCKnCE,G,MAVG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YAC/B,OACI,2BAAOb,UAAU,YACbc,KAAK,SACLD,YAAaA,EACbE,SAAUH,MCmCPI,E,YArCb,aAAc,IAAD,8BACX,+CAaJJ,aAAe,SAACK,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbnC,EAAKC,MAAQ,CACXnB,SAAS,GACTgB,YAAa,IAJJ,E,iFAQK,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACf,SAASwB,S,+BAO5B,IAAD,EAC4BC,KAAKN,MAA/BnB,EADF,EACEA,SAAUgB,EADZ,EACYA,YACZU,EAAe1B,EAAS2B,QAAO,SAAArB,GAAO,OAC1CA,EAAQJ,KAAK0B,cAAcC,SAASb,EAAYY,kBAGlD,OACE,yBAAK/B,UAAU,OACb,gDACA,kBAAC,EAAD,CACEa,YAAY,kBACZD,aAAcgB,KAAKhB,eAErB,kBAAC,EAAD,CAAUT,SAAU0B,S,GAhCVI,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.d6a30089.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './card.style.css';\r\n\r\nconst Card = (props) => {\r\n    return(\r\n    <div className='card-container'>\r\n        <img alt='robos' src={`https://robohash.org/${props.monsters.id}?set=set2&size=180x180`}/>\r\n        <h2>{props.monsters.name}</h2>\r\n        <p>{props.monsters.email}</p>\r\n    </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport './cardlist.style.css';\r\nimport Card from '../card.component/card.component'\r\n\r\nconst Cardlist = (props) => {\r\n    return(\r\n        <div className='cardlist'>\r\n            {props.monsters.map(monster=>\r\n                (<Card key={monster.id} monsters={monster}/>))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\nimport './searchbox.styles.css'\r\n\r\nconst SearchBox = ({ handleChange, placeholder }) => {\r\n    return(\r\n        <input className='searchBox' \r\n            type='search' \r\n            placeholder={placeholder} \r\n            onChange={handleChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React from 'react';\nimport './App.css';\nimport Cardlist from './Components/Cardlist.component/cardlist.component'\nimport SearchBox from './Components/searchbox.component/searchbox.component'\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters:[],\n      searchField: ''\n    }\n  }\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response=>response.json())\n  .then(users=>this.setState({monsters:users}))\n}\n\nhandleChange = (e) => {\n  this.setState({searchField: e.target.value})\n}\n\n  render(){\n    const { monsters, searchField } = this.state\n    const filteredList = monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())  \n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder='search monsters'\n          handleChange={this.handleChange} \n        />\n        <Cardlist monsters={filteredList}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}